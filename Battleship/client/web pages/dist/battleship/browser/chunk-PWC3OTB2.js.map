{
  "version": 3,
  "sources": ["src/app/features/battle_grid.component.ts"],
  "sourcesContent": ["import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterOutlet],\r\n  template: `\r\n    <h1>Battleship Free-For-All</h1>\r\n    <div class=\"tables-container\">\r\n    <div class=\"table-container\"> \r\n    <table>\r\n    <caption>Your Grid</caption>\r\n    <thead>\r\n    <tr>\r\n      <th></th>\r\n      <th *ngFor=\"let column of columns\">{{ column }}</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let row of rows\">\r\n      <th>{{ row }}</th>\r\n      <td *ngFor=\"let column of columns\"\r\n          [ngStyle]=\"{'background-color': getCellColor(row + column)}\"\r\n         \r\n          id=\"{{ row + column }}\"> \r\n</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n    </div>\r\n    \r\n  \r\n    <div class=\"table-container\">\r\n    <table class=\"table-container\">\r\n    <caption>Battle Grid</caption>\r\n    <thead>\r\n    <tr>\r\n      <th></th>\r\n      <th *ngFor=\"let column of columns\">{{ column }}</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let row of rows\">\r\n      <th>{{ row }}</th>\r\n      <td *ngFor=\"let column of columns\" id=\"{{ row + column }}\" (click)=\"toggleCellClick(row + column)\"  [class.clicked]=\"isCellClicked(row + column)\"></td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n    </div>\r\n    </div>\r\n   \r\n    <div *ngIf=\"hits.length > 0\">\r\n  <h2>Hits List:</h2>\r\n  <p>Your hits: {{ hits.join(', ') }}</p><p>Hits recived: {{ hits_recived.join(', ') }}</p>\r\n</div>\r\n    <router-outlet></router-outlet>\r\n  `,\r\n  styles: [\r\n  ],\r\n})\r\nexport class BattleGridComponent {\r\n  title = 'battleship';\r\n  rows = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];\r\n  columns = Array.from({ length: 10 }, (_, i) => i + 1);\r\n  ships: string[] = ['A1', 'A2', 'A3', 'C6', 'C7', 'C8', 'C9'];\r\n  ships_u1: string[] = ['A1', 'A2', 'A3', 'C6', 'C7', 'C8', 'C9'];\r\n  ships_u2: string[] = ['A1', 'A2', 'A3', 'C6', 'C7', 'C8', 'C9'];\r\n  ships_u3: string[] = ['A1', 'A2', 'A3', 'C6', 'C7', 'C8', 'C9'];\r\n  hits_recived: string[] = ['A1', 'B2','C6'];\r\n  hits: string[] = [];\r\n\r\n  // Function to check if a cell is a hit\r\n  \r\n  isHit(cell: string): boolean {\r\n    return this.hits_recived.includes(cell) && this.ships.includes(cell);}\r\n\r\n    isSelected(cell: string): boolean {\r\n      return this.ships.includes(cell);}\r\n\r\n      getCellColor(cell: string): string {\r\n        if (this.hits_recived.includes(cell) && this.ships.includes(cell)) {\r\n          return 'red'; // Hit cells are red\r\n        } else if (this.ships.includes(cell)) {\r\n          return 'green'; // Additional conditions\r\n        } else {\r\n          return ''; \r\n        }\r\n      }\r\n\r\n      \r\n\r\n      clickedCells: string[] = [];\r\n\r\n      // Function to toggle the clicked state and change color\r\n      toggleCellClick(coordinates: string): void {\r\n        if (this.isCellClicked(coordinates)) {\r\n          return; // Skip further processing if the cell is already clicked\r\n        }\r\n\r\n        const index = this.clickedCells.indexOf(coordinates);\r\n        \r\n        if (index == -1) {  \r\n          this.hits.push(coordinates);\r\n          this.clickedCells.push(coordinates); // Remove from array if already clicked\r\n        }\r\n\r\n    \r\n      }\r\n\r\n      isCellClicked(coordinates: string): boolean {\r\n        return this.clickedCells.includes(coordinates);\r\n      }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
