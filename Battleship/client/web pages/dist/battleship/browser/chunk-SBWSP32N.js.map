{
  "version": 3,
  "sources": ["src/app/features/initial_grid.component.ts"],
  "sourcesContent": ["import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { OnInit } from '@angular/core';\r\nimport {HttpClient, HttpClientModule} from \"@angular/common/http\";\r\nimport {FormBuilder, FormsModule, ReactiveFormsModule, Validators} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterOutlet],\r\n  template: `\r\n  <div>\r\n  <h3>Battleship Game</h3>\r\n\r\n  <table>\r\n    <tr *ngFor=\"let row of gameBoard; let i = index\">\r\n        <td *ngFor=\"let cell of row; let j = index\"\r\n        [class.ship]=\"cell !== 0\"\r\n        [class.selected]=\"isSelected(i, j)\"\r\n        (click)=\"placeShip(i, j)\">\r\n        </td>\r\n    </tr>\r\n  </table>\r\n</div>\r\n\r\n    <router-outlet></router-outlet>\r\n  `,\r\n  styles: [`\r\n    table {\r\n        border-collapse: collapse;\r\n      }\r\n      \r\n      td {\r\n        width: 30px;\r\n        height: 30px;\r\n        border: 1px solid black;\r\n        text-align: center;\r\n      }\r\n      \r\n      .ship {\r\n        background-color: gray;\r\n      }\r\n      \r\n      .selected {\r\n        background-color: lightblue;\r\n      }\r\n      `],\r\n})\r\n\r\nexport class InitialGridComponent implements OnInit{\r\n\r\n        gridSize = 10;\r\n        ships = [\r\n          { size: 2, count: 1 },\r\n          { size: 3, count: 1 },\r\n          { size: 3, count: 1 },\r\n          { size: 4, count: 1 },\r\n          { size: 5, count: 1 }\r\n        ];\r\n        gameBoard: number[][] = [];\r\n        selectedCells: { row: number, col: number }[] = [];\r\n      \r\n        constructor()\r\n          {\r\n              // guess what we'll do here ...\r\n          }\r\n        ngOnInit(): void {\r\n          this.initializeBoard();\r\n        }\r\n      \r\n        initializeBoard(): void {\r\n          for (let i = 0; i < this.gridSize; i++) {\r\n            this.gameBoard[i] = [];\r\n            for (let j = 0; j < this.gridSize; j++) {\r\n              this.gameBoard[i][j] = 0; // 0 represents empty cell\r\n            }\r\n          }\r\n        }\r\n      \r\n        placeShip(row: number, col: number): void {\r\n            console.log(\"Placing ship at row:\", row, \"col:\", col);\r\n          const selectedShip = this.ships.find(ship => ship.size === this.selectedShipSize);\r\n          if (!selectedShip || selectedShip.count === 0) return;\r\n      \r\n          const shipLength = selectedShip.size;\r\n          const isHorizontal = this.isHorizontal;\r\n          const maxRow = isHorizontal ? row : row + shipLength - 1;\r\n          const maxCol = isHorizontal ? col + shipLength - 1 : col;\r\n      \r\n          if (!this.isValidPosition(row, col, maxRow, maxCol)) return;\r\n      \r\n          for (let i = 0; i < shipLength; i++) {\r\n            if (isHorizontal) {\r\n              this.gameBoard[row][col + i] = shipLength;\r\n            } else {\r\n              this.gameBoard[row + i][col] = shipLength;\r\n            }\r\n          }\r\n      \r\n          selectedShip.count--;\r\n      \r\n          if (selectedShip.count === 0) {\r\n            this.selectedShipSize = 0;\r\n          }\r\n      \r\n          this.selectedCells.push({ row, col });\r\n        }\r\n      \r\n        isValidPosition(startRow: number, startCol: number, endRow: number, endCol: number): boolean {\r\n            // Check if the end coordinates are within the game board boundaries\r\n            if (endRow >= this.gridSize || endCol >= this.gridSize) return false;\r\n          \r\n            // Check if any cell in the range is already occupied by a ship\r\n            for (let i = startRow; i <= endRow; i++) {\r\n              for (let j = startCol; j <= endCol; j++) {\r\n                if (this.gameBoard[i][j] !== 0) {\r\n                  console.log(\"Position is not valid: Cell at row\", i, \"column\", j, \"is already occupied.\");\r\n                  return false; // Cell is already occupied\r\n                }\r\n              }\r\n            }\r\n          \r\n            console.log(\"Position is valid\");\r\n            return true; // All cells in the range are empty\r\n          }\r\n      \r\n          isSelected(row: number, col: number): boolean {\r\n            return this.selectedCells.some(cell => cell.row === row && cell.col === col);\r\n          }\r\n      \r\n        selectedShipSize: number = 0;\r\n        isHorizontal: boolean = true;\r\n      \r\n    \r\n        selectShip(size: number): void {\r\n            this.selectedShipSize = size;\r\n            console.log(\"Selected ship size:\", this.selectedShipSize);\r\n          }\r\n        toggleOrientation(): void {\r\n          this.isHorizontal = !this.isHorizontal;\r\n        }\r\n    \r\n    }"],
  "mappings": "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",
  "names": []
}
